<?php

//00100 デバイスの切り分け
  /*Mobile_Detectの読み込み*/
  require_once 'assets/Mobile_Detect/Mobile_Detect.php' ;

  // 判別
      // タブレットの場合
      $detect = new Mobile_Detect ;
      if( $detect->isTablet() )
      {
          // 処理
          $browser = 'Tb' ;
          $viewport = '<meta name="viewport" content="width=1280,user-scalable=no">';
          $forBody="tb";
      }
      // スマホの場合
      elseif( $detect->isMobile() )
      {
          // 処理
          $browser = 'Sp' ;
          $viewport = '<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=2.0,user-scalable=yes">';
          $forBody="sp";
      }
      // デスクトップの場合
      else
      {
          // 処理
          $browser = 'Pc';
          $viewport = '<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no">';
          $forBody = "pc";
      }

//001900
// jQuery読み込みを停止
function register_common_script() {
  if (!is_admin()){
    $script_dir = get_template_directory_uri();
    wp_deregister_script( 'jquery' );
    wp_enqueue_script( 'jquery', 'http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js',array(), false, false);
    // wp_enqueue_script( 'cssfx', $script_dir.'/lib/cssfx.min.js', array(), false, false );
    // wp_enqueue_script( 'respondjs', $script_dir.'/lib/respond.min.js',array('jquery'), false, true);
  }
}
add_action('wp_enqueue_scripts','register_common_script');


//00200 cssとjsの読み込み
  function nanairo_scripts()
    {
    global $pattern_file;
    global $browser;
    global $filename;

    //Fundamental CSS & JS
    //ie9
    if ( is_customize_preview() ) {
      wp_enqueue_style( 'nanairo-ie9', get_stylesheet_directory_uri( '/assets/library/css/ie9.css' ), array( 'nanairo-wacuCm' ), '1.0' );
      wp_style_add_data( 'nanairo-ie9', 'conditional', 'IE 9' );
    }

    // Load the Internet Explorer 8 specific stylesheet.
    wp_enqueue_style( 'nanairo-ie8', get_stylesheet_directory_uri( '/assets/library/css/ie8.css' ), array( 'nanairo-wacuCm' ), '1.0' );
    wp_style_add_data( 'nanairo-ie8', 'conditional', 'lt IE 9' );

    // Load the html5 shiv.
    wp_enqueue_script( 'nanairo-html5', get_stylesheet_directory_uri( '/assets/library/js/html5.js' ), array(), '3.7.3' );
    wp_script_add_data( 'html5', 'conditional', 'lt IE 9' );


    //fontawesome
    wp_enqueue_script( 'nanairo-fontawesome', 'https://use.fontawesome.com/9e7b2dca0f.js');

    //wacuCm
    wp_enqueue_style('nanairo-wacuCm', get_stylesheet_directory_uri().'/assets/wacu/css/wacuCm.css' , array('js_composer_front') , '1.0.0' , false);
    wp_enqueue_style('nanairo-wacuPc', get_stylesheet_directory_uri().'/assets/wacu/css/wacuPc.css' , array('nanairo-wacuCm') , '1.0.0' ,'screen and (min-width: 769px)', false);
    wp_enqueue_style('nanairo-wacuTb', get_stylesheet_directory_uri().'/assets/wacu/css/wacuTb.css' , array('nanairo-wacuPc') , '1.0.0' ,'screen and (min-width: 481px) and (max-width:768px)', false);
    wp_enqueue_style('nanairo-wacuSp', get_stylesheet_directory_uri().'/assets/wacu/css/wacuSp.css' , array('nanairo-wacuTb') , '1.0.0' ,'screen and (max-width:480px)', false);

    //wacu load
    //wp_enqueue_style('nanairo-wacu'.$browser , get_stylesheet_directory_uri().'/assets/wacu/css/wacu'.$browser.'.css' , array('nanairo-wacuCm') , '1.0.0' , false);

    //style
    wp_enqueue_style('nanairo-style', get_stylesheet_directory_uri(). '/assets/library/css/style.css' , array('nanairo-wacuCm') , '1.0.0' , false);
    // wp_enqueue_style('nanairo-stylePc', get_stylesheet_directory_uri(). '/assets/library/css/stylePc.css' , array('nanairo-styleCm') , '1.0.0' ,'screen and (min-width: 769px)', false);
    // wp_enqueue_style('nanairo-styleTb', get_stylesheet_directory_uri(). '/assets/library/css/styleTb.css' , array('nanairo-stylePc') , '1.0.0' ,'screen and (min-width: 481px) and (max-width:768px)', false);
    // wp_enqueue_style('nanairo-styleSp', get_stylesheet_directory_uri(). '/assets/library/css/styleSp.css' , array('nanairo-styleTb') , '1.0.0' ,'screen and (max-width:480px)', false);


  // original Font
    wp_enqueue_style('nanairo-icomoon', get_stylesheet_directory_uri(). '/assets/icomoon/style.css' );





    //style load
    //wp_enqueue_style('nanairo-style'.$browser , get_stylesheet_directory_uri(). '/assets/library/css/style' . 'Cm.css' , array('nanairo-styleCm') , '1.0.0' , false);

    //jQuery.js
    wp_enqueue_script('nanairo-jquery3.1.1', 'https://code.jquery.com/jquery-3.1.1.min.js' , array(), '3.1.1', false);

    //jquery.scrollTo
    wp_enqueue_script( 'nanairo-jqueryScrollto', get_theme_file_uri( '/assets/library/js/jquery.scrollTo.js' ), array( 'jquery' ), '2.1.2', true );

    //jsPc
    // wp_enqueue_script( 'nanairo-jsPc', get_theme_file_uri( '/assets/library/js/jsPc.js' ), array( 'jquery' ), '2.1.2', true );

    //platform.js
    wp_enqueue_script('nanairo-platform', get_stylesheet_directory_uri().'/assets/library/js/platform.js', array(), 'jquery', false);


    if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {
      wp_enqueue_script( 'comment-reply' );
    }


    //各ページでのCSSの取得
    global $post;

    if ( is_front_page() ) // 固定ページでのトップページの場合
      {
        $frontpagefilename = get_stylesheet_directory() . '/assets/page/frontpage.css';
        if(file_exists($frontpagefilename))
        {
          wp_enqueue_style('style-frontpage', get_stylesheet_directory_uri() . '/assets/page/frontpage.css');
        }
        else{
        }
      }

    elseif ( is_page() )
      {
      //frontpage以外の固定ページの場合
      $pageSlug = $page = get_page(get_the_ID());
      $slug = $page->post_name;
      $filename = get_stylesheet_directory().'/assets/page/css/'. $slug .  '/css' .'/' . $slug .  'Cm.css';
      $pageSlug = get_page_uri($post->ID);
      $slugfilename = get_stylesheet_directory().'/assets/page/'.$pageSlug .'/css' .'/' .$pageSlug . 'Cm.css';

      if(file_exists($filename))
        {
          wp_enqueue_style('style-eachpage',get_stylesheet_directory_uri().'/assets/page/' . $slug  . '.css' , array() , '1.0.0' , false);
          // wp_enqueue_style('style-eachpagePc',get_stylesheet_directory_uri().'/assets/page/'.$slug . '/css' .'/'  . $slug  . 'Pc.css' , array() , '1.0.0' , 'screen and (min-width: 769px)' , false);
          // wp_enqueue_style('style-eachpageTb',get_stylesheet_directory_uri().'/assets/page/'.$slug . '/css' .'/'  . $slug  . 'Tb.css' , array() , '1.0.0' , 'screen and (min-width: 481px) and (max-width:768px)' , false);
          // wp_enqueue_style('style-eachpageSp',get_stylesheet_directory_uri().'/assets/page/'.$slug . '/css' .'/'  . $slug  . 'Sp.css' , array() , '1.0.0' , 'screen and (max-width:480px)' , false);
        }
      // else{
      //孫以降の処理
        $pageSlug = $page = get_page(get_the_ID());

        if($post -> post_parent != 0 )
          {
          $ancestors = array_reverse(get_post_ancestors( $post->ID ));
          foreach($ancestors as $ancestor)
            {
            $slugcss = get_post($ancestor)->post_name;
            if(file_exists($filename))
              {
              wp_enqueue_style('style-child-page', get_stylesheet_directory_uri().'/assets/page/'  . $slugcss  . '.css' , array() , '1.0.0' , false);
              // wp_enqueue_style('style-child-pagePc', get_stylesheet_directory_uri().'/assets/page/' . $slugcss . '/css' .'/'  . $slugcss .'Pc.css' , array() , '1.0.0' , 'screen and (min-width: 769px)' , false);
              // wp_enqueue_style('style-child-pageTb', get_stylesheet_directory_uri().'/assets/page/' . $slugcss . '/css' .'/'  . $slugcss .'Tb.css' , array() , '1.0.0' , 'screen and (min-width: 481px) and (max-width:768px)' , false);
              // wp_enqueue_style('style-child-pageSp', get_stylesheet_directory_uri().'/assets/page/' . $slugcss . '/css' .'/'  . $slugcss .'Sp.css' , array() , '1.0.0' , 'screen and (max-width:480px)' , false);
              }
            }
          }
        else
          {
          //トップから見ての子ページの処理
          if(file_exists($filename))
            {
            }
          elseif(file_exists($slugfilename))
            {
              wp_enqueue_style('style-slugfilenameCm', get_stylesheet_directory_uri().'/assets/page/'. get_page_uri($post->ID) . '.css' , array() , '1.0.0' , false);
              // wp_enqueue_style('style-slugfilenamePc', get_stylesheet_directory_uri().'/assets/page/'. get_page_uri($post->ID) .'/css' .'/'  . get_page_uri($post->ID) . 'Pc.css' , array() , '1.0.0' , 'screen and (min-width: 769px)' , false);
              // wp_enqueue_style('style-slugfilenameTb', get_stylesheet_directory_uri().'/assets/page/'. get_page_uri($post->ID) .'/css' .'/'  . get_page_uri($post->ID) . 'Tb.css' , array() , '1.0.0' , 'screen and (min-width: 481px) and (max-width:768px)' , false);
              // wp_enqueue_style('style-slugfilenameSp', get_stylesheet_directory_uri().'/assets/page/'. get_page_uri($post->ID) .'/css' .'/'  . get_page_uri($post->ID) . 'Sp.css' , array() , '1.0.0' , 'screen and (max-width:480px)' , false);
            }
          }
      // }
      }
      elseif ( is_category() )
        {
        //カテゴリの場合の処理（まだ）
        $categories = get_the_category( $post->ID );
        $categorySlug = $categories[0]->slug;
        return $categorySlug;
        }
      else
        {
        return NULL;
        }
      }

  add_action( 'wp_enqueue_scripts', 'nanairo_scripts' );




//00300 「テーマで wp_title() を呼び出すことはできません。」対策
  add_theme_support( 'title-tag' );



//00400 wp_head()の内容で不必要なものを消す
  remove_action('wp_head', 'feed_links', 2);
  remove_action('wp_head', 'feed_links_extra', 3);
  remove_action('wp_head', 'rsd_link');
  remove_action('wp_head', 'wlwmanifest_link');
  remove_action('wp_head', 'adjacent_posts_rel_link_wp_head');
  remove_action('wp_head', 'wp_generator');
  remove_action('wp_head', 'rel_canonical');
  remove_action('wp_head', 'index_rel_link');
  remove_action('wp_head', 'parent_post_rel_link', 10, 0);
  remove_action('wp_head', 'start_post_rel_link', 10, 0);
  remove_action('wp_head', 'wp_shortlink_wp_head');
  // Since 4.4
  remove_action('wp_head','wp_oembed_add_discovery_links');
  remove_action('wp_head','rest_output_link_wp_head');





//00500　contents width assign コンテンツ幅（大）の設定
  if ( ! isset( $content_width ) )
  {
    $content_width = 640;
  }



//00600 Add default posts and comments RSS feed links to head.
  add_theme_support( 'automatic-feed-links' );



//00700 サムネイル
  add_theme_support( 'post-thumbnails' );
  add_image_size( 'thumbnail-profile', 400, 400, true );
  add_image_size( 'thumb75', 75, 75, true);


//00800 サイドバー
  //top サイドバー追加 v.1.0.5
  add_action( 'widgets_init', 'topSidebar_init' );
    function topSidebar_init() {
        register_sidebar( array(
          'name' => __('TOPページ用サイドバー'),
          'id' => 'topSidebar',
          'description' => __('TOPページ用サイドバーです'),
          'before_widget' => '<aside id="%1$s" class="top-side-bar widget %2$s">',
          'after_widget' => '</aside>',
          'before_title' => '<h3 class="">',
          'after_title' => '</h3>',
        ) );
    }


  //フッター サイドバー01追加
  add_action( 'widgets_init', 'footerSidebar01_init' );
    function footerSidebar01_init() {
        register_sidebar( array(
          'name' => __('フッター用サイドバー01'),
          'id' => 'footerSidebar01',
          'description' => __('フッター用サイドバー01です'),
          'before_widget' => '<aside id="%1$s" class="footer-side-bar widget %2$s">',
          'after_widget' => '</aside>',
          'before_title' => '<div class="">',
          'after_title' => '</h3>',
        ) );
    }

  //フッター サイドバー02追加
  add_action( 'widgets_init', 'footerSidebar02_init' );
    function footerSidebar02_init() {
        register_sidebar( array(
          'name' => __('フッター用サイドバー02'),
          'id' => 'footerSidebar01',
          'description' => __('フッター用サイドバー02です'),
          'description' => __('フッター用サイドバー02です'),
          'before_widget' => '<aside id="%1$s" class="footer-side-bar widget %2$s">',
          'after_widget' => '</aside>',
          'before_title' => '<div class="">',
          'after_title' => '</h3>',
        ) );
    }


  //フッター サイドバー03追加
  add_action( 'widgets_init', 'footerSidebar03_init' );
    function footerSidebar03_init() {
        register_sidebar( array(
          'name' => __('フッター用サイドバー03'),
          'id' => 'footerSidebar01',
          'description' => __('フッター用サイドバー03です'),
          'description' => __('フッター用サイドバー03です'),
          'before_widget' => '<aside id="%1$s" class="footer-side-bar widget %2$s">',
          'after_widget' => '</aside>',
          'before_title' => '<div class=""></div><h3>',
          'after_title' => '</h3>',
        ) );
    }


  //フッター サイドバー04追加
  add_action( 'widgets_init', 'footerSidebar04_init' );
    function footerSidebar04_init() {
        register_sidebar( array(
          'name' => __('フッター用サイドバー04'),
          'id' => 'footerSidebar01',
          'description' => __('フッター用サイドバー04です'),
          'description' => __('フッター用サイドバー04です'),
          'before_widget' => '<aside id="%1$s" class="footer-side-bar widget %2$s">',
          'after_widget' => '</aside>',
          'before_title' => '<div class=""></div><h3>',
          'after_title' => '</h3>',
        ) );
    }





//00900 ファイル実行 ショートコード v.1.0.8
  //[myphp file="test.php"]
  function Include_my_php($params = array())
  {
    extract(shortcode_atts(array('file' => 'default',), $params));
    ob_start();
    include get_theme_root().'/'.get_template()."/$file.php";
    return ob_get_clean();
  }
  add_shortcode('myphp', 'Include_my_php');




//00950　特定のカテゴリのみニュースに出す カテゴリ表記なし
// [news1 cat="1" num="10"]
//echo do_shortcode( '[news21 cat="1" num="10"]' );
/* 最新記事リスト */
  function getNewItems1($atts)
  {
    extract(shortcode_atts(array(
        'num' => '',    //最新記事リストの取得数
        'cat' => '',    //表示する記事のカテゴリー指定
    ), $atts));

    global $post;
    $oldpost = $post;

    $myposts = get_posts('numberposts='.$num.'&order=DESC&orderby=post_date&category='.$cat);
    $retHtml = '<ul id="newsList" class="newsListWrapper withCategory newsList1">';

    foreach ($myposts as $post) :
      $content = strip_tags($post->post_content);
      $cat = get_the_category();//カテゴリー
      $catname = $cat[0]->cat_name;//カテゴリー名
      $catslug = $cat[0]->slug;//カテゴリースラッグ
    $category_id = get_cat_ID( $catname );// 指定したカテゴリーの ID を取得
    $category_link = get_category_link( $category_id );// このカテゴリーの URL を取得

    // このカテゴリーの URL を取得
    $category_link = get_category_link( $category_id );
      setup_postdata($post);
    $retHtml .= '<li class="categoryListWrapper">';
    $retHtml .= '<time class="entry-date">'.get_post_time('Y/m/d').'</time>'; //"Y年n月j日 l H:i:s"
    $retHtml .= '<a href="' . site_url() . '/' . $catslug  . '" class="cat ' . $catslug . '"><span>' . $catname . '</span></a>'; //"Y年n月j日 l H:i:s"
        $retHtml .= '<h2 class="categoryListTitle "><i class="fa fa-caret-right" aria-hidden="true"></i><a href="'.get_permalink().'">'.the_title("","",false).'</a></h2>';
        //$retHtml .= '<p class="post-content">'.nl2br($content).'</p>';
        //$retHtml.='<p class="more-detail"><a href="'.get_permalink().'">詳しく見る</a></p>';

        $retHtml .= '</li>';
  endforeach;
  $retHtml .= '</ul>';
  $post = $oldpost;
  wp_reset_postdata();

  return $retHtml;
  }
add_shortcode('news1', 'getNewItems1');


//01000　特定のカテゴリのみニュースに出す カテゴリ表記なし
// [news2 cat="1" num="10"]
//echo do_shortcode( '[news2 cat="1" num="10"]' );
/* 最新記事リスト */
  function getNewItems2($atts)
  {
    extract(shortcode_atts(array(
        'num' => '',    //最新記事リストの取得数
        'cat' => '',    //表示する記事のカテゴリー指定
    ), $atts));

    global $post;
    $oldpost = $post;

    $myposts = get_posts('numberposts='.$num.'&order=DESC&orderby=post_date&category='.$cat);
    $retHtml = '<ul id="newsList" class="newsListWrapper withoutCategory newsList2">';

    foreach ($myposts as $post) :
      $content = strip_tags($post->post_content);
      $cat = get_the_category();//カテゴリー
      $catname = $cat[0]->cat_name;//カテゴリー名
      $catslug = $cat[0]->slug;//カテゴリースラッグ
    $category_id = get_cat_ID( $catname );// 指定したカテゴリーの ID を取得
    $category_link = get_category_link( $category_id );// このカテゴリーの URL を取得

    // このカテゴリーの URL を取得
    $category_link = get_category_link( $category_id );
      setup_postdata($post);
    $retHtml .= '<li class="categoryListWrapper">';
    $retHtml .= '<time class="entry-date">'.get_post_time('Y/m/d').'</time>'; //"Y年n月j日 l H:i:s"
        $retHtml .= '<h2 class="categoryListTitle "><i class="fa fa-caret-right" aria-hidden="true"></i><a href="'.get_permalink().'">'.the_title("","",false).'</a></h2>';
        //$retHtml .= '<p class="post-content">'.nl2br($content).'</p>';
        //$retHtml.='<p class="more-detail"><a href="'.get_permalink().'">詳しく見る</a></p>';

        $retHtml .= '</li>';
  endforeach;
  $retHtml .= '</ul>';
  $post = $oldpost;
  wp_reset_postdata();

  return $retHtml;
  }
add_shortcode('news2', 'getNewItems2');



//01100  パンくずリスト
function breadcrumb(){
  global $post;
  $str ='';

  if(!is_home()&&!is_admin()&&!is_front_page()){ /* !is_admin は管理ページ以外という条件分岐 */
    $str.= '<div id="breadcrumb">';
    $str.= '<ul>';
    $str.= '<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="' . home_url('/') .'" class="home" itemprop="url" ><span itemprop="title">HOME</span></a></li>';

    /* 投稿のページ */
    if(is_single()){
      $categories = get_the_category($post->ID);
      $cat = $categories[0];
      if($cat -> parent != 0){
        $ancestors = array_reverse(get_ancestors( $cat -> cat_ID, 'category' ));
        foreach($ancestors as $ancestor){
          $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="'. get_category_link($ancestor).'"  itemprop="url" ><span itemprop="title">'. get_cat_name($ancestor). '</span></a></li>';
                  }
      }
      $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="'. get_category_link($cat -> term_id). '" itemprop="url" ><span itemprop="title">'. $cat-> cat_name . '</span></a></li>';
      $str.= '<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">'. overStringSafe($post -> post_title, 30) .'</span></li>';
    }

    /* 固定ページ */
    elseif(is_page()){
      if($post -> post_parent != 0 ){
        $ancestors = array_reverse(get_post_ancestors( $post->ID ));
        foreach($ancestors as $ancestor){
          $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="'. get_permalink($ancestor).'" itemprop="url" ><span itemprop="title">'. get_the_title($ancestor) .'</span></a></li>';
                  }
      }
      $str.= '<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">'. overStringSafe($post -> post_title, 30) .'</span></li>';
    }

    /* カテゴリページ */
    elseif(is_category()) {
      $cat = get_queried_object();
      if($cat -> parent != 0){
        $ancestors = array_reverse(get_ancestors( $cat -> cat_ID, 'category' ));
        foreach($ancestors as $ancestor){
          $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="'. get_category_link($ancestor) .'" itemprop="url" ><span itemprop="title">'. get_cat_name($ancestor) .'</span></a></li>';
        }
      }
      $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">'. overStringSafe($cat -> name, 30) . '</span></li>';
    }

    /* タグページ */
    elseif(is_tag()){
      $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">'. single_tag_title( '' , false ). '</span></li>';
    }

    /* 時系列アーカイブページ */
    elseif(is_date()){
      if(get_query_var('day') != 0){
        $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="'. get_year_link(get_query_var('year')). '" itemprop="url" ><span itemprop="title">' . get_query_var('year'). '年</span></a></li>';
        $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="'. get_month_link(get_query_var('year'), get_query_var('monthnum')). '" itemprop="url" ><span itemprop="title">'. get_query_var('monthnum') .'月</span></a></li>';
        $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">'. get_query_var('day'). '</span>日</li>';
      } elseif(get_query_var('monthnum') != 0){
        $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="'. get_year_link(get_query_var('year')) .'" itemprop="url" ><span itemprop="title">'. get_query_var('year') .'年</span.</a></li>';
        $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">'. get_query_var('monthnum'). '</span>月</li>';
      } else {
        $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">'. get_query_var('year') .'年</span></li>';
      }
    }

    /* 投稿者ページ */
    elseif(is_author()){
      $str .='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">投稿者 : '. get_the_author_meta('display_name', get_query_var('author')).'</span></li>';
    }

    /* 添付ファイルページ */
    elseif(is_attachment()){
      if($post -> post_parent != 0 ){
        $str.= '<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="'. get_permalink($post -> post_parent).'" itemprop="url" ><span itemprop="title">'. get_the_title($post -> post_parent) .'</span></a></li>';
      }
      $str.= '<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">' . $post -> post_title . '</span></li>';
    }

    /* 検索結果ページ */
    elseif(is_search()){
      $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">「'. get_search_query() .'」で検索した結果</span></li>';
    }

    /* 404 Not Found ページ */
    elseif(is_404()){
      $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">お探しの記事は見つかりませんでした。</span></li>';
    }

    /* その他のページ */
    else{
      $str.='<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><span itemprop="title">'. wp_title('', false) .'</span></li>';
    }
    $str.='</ul>';
    $str.='</div>';
    }
  echo $str;
  }

//01200 固定ページにカテゴリ付与機能を追加
//  add_action('init', 'add_categories_for_pages');
//
//  function add_categories_for_pages()
//  {
//    register_taxonomy_for_object_type('category', 'page');
//  }
//  add_action('pre_get_posts', 'nobita_merge_page_categories_at_category_archive');
//
//  function nobita_merge_page_categories_at_category_archive($query)
//  {
//    if ($query->is_category == true && $query->is_main_query()) {
//      $query->set('post_type', array('post', 'page', 'nav_menu_item'));
//    }
//  }

//01200 
// =========================================================
// 文字数が制限オーバーした場合に、最後に・・・をつける処理
// =========================================================
function overStringSafe($string, $seigen) {
    $moji_count = strlen($string);
    $seigen = $seigen * 2;
    if (is_category()){
        if ($moji_count > $seigen) {
            $string = mb_substr($string, 0, 30, 'UTF-8');
            $string = $string. '>>>>';
        }
    }else{
        if ($moji_count > $seigen) {
            $string = mb_substr($string, 0, 30, 'UTF-8');
            $string = $string. '…';
        }
    }

    return $string;
}



//01300 管理バーにログアウトを追加
  function add_new_item_in_admin_bar()
  {
    global $wp_admin_bar;
    $wp_admin_bar->add_menu(array(
  'id' => 'new_item_in_admin_bar',
  'title' => __('ログアウト'),
  'href' => wp_logout_url(),
  ));
  }
  add_action('wp_before_admin_bar_render', 'add_new_item_in_admin_bar');



//01400 5.3-バージョンアップ通知を管理者のみ表示させるようにします。
  function update_nag_admin_only()
  {
    if (!current_user_can('administrator'))
    {
      remove_action('admin_notices', 'update_nag', 3);
    }
  }
  add_action('admin_init', 'update_nag_admin_only');


//01500 tagにIDタグを追加　
    //[body_id]
    //echo do_shortcode( '[body_id]' );
    function body_idFunc()
    {
        if (is_front_page()) {
            $body_id = home;
        } elseif (is_single() || is_page()) {
            $page = get_page(get_the_ID());
            $body_id = $page->post_name;
        } elseif (is_category()) {
            $category = get_the_category();
            $body_id = 'category_'.$category[0]->category_nicename;
        }

        return $body_id;
    }
    add_shortcode('body_id', 'body_idFunc');


//01600 カテゴリーページの「カテゴリー：○○」の「カテゴリー：」を消す
    add_filter('get_the_archive_title', function ($title) {

        if (is_category()) {
            $title = single_cat_title('', false);
        }

        return $title;

    });

//01700 bodyタグのclassにページスラッグを追加する
    function body_classFunc($classes = '')
    {
        if (is_page()) {
            $page = get_page(get_the_ID());
            $classes[] = 'page-'.$page->post_name;
            if ($page->post_parent) {
                $classes[] = 'page-'.get_page_uri($page->post_parent).'-child';
            }
        }

        return $classes;
    }
    add_filter('body_class', 'body_classFunc');



//01800 URLからcategoryを抜く
    add_filter('user_trailingslashit', 'remcat_function');
    function remcat_function($link) {
        return str_replace("/category/", "/", $link);
    }

    add_action('init', 'remcat_flush_rules');
    function remcat_flush_rules() {
        global $wp_rewrite;
        $wp_rewrite->flush_rules();
    }

    add_filter('generate_rewrite_rules', 'remcat_rewrite');
    function remcat_rewrite($wp_rewrite) {
        $new_rules = array('(.+)/page/(.+)/?' => 'index.php?category_name='.$wp_rewrite->preg_index(1).'&paged='.$wp_rewrite->preg_index(2));
        $wp_rewrite->rules = $new_rules + $wp_rewrite->rules;
    }


//01900 サムネイルサイズの追加設定
  // add_image_size('thumb75', 75, 75, true);


//02000 管理画面とフロントの見え方の統一
add_editor_style( get_stylesheet_directory_uri().'/assets/library/css/editor-style.css');

function my_admin_style(){
    wp_enqueue_style( 'my_admin_style', get_template_directory_uri().'/assets/library/css/editor-style.css' );
}
add_action( 'admin_enqueue_scripts', 'my_admin_style' );


//02100 ロゴ追加
add_action( 'customize_register', 'theme_customize' );

function theme_customize($wp_customize){

  //画像
  $wp_customize->add_section( 'img_section', array(
    'title' => '画像', //セクションのタイトル
    'priority' => 59, //セクションの位置
    'description' => '画像をアップロードしてください。', //セクションの説明
  ));

    $wp_customize->add_setting( 'logo_img' ); //設定項目を追加
    $wp_customize->add_control( new WP_Customize_Image_Control( $wp_customize, 'logo_img', array(
      'label' => 'ロゴ画像', //設定項目のタイトル
      'section' => 'img_section', //追加するセクションのID
      'settings' => 'logo_img', //追加する設定項目のID
      'description' => 'ロゴ画像を設定してください。', //設定項目の説明
    )));

}

/* テーマカスタマイザーで設定された画像のURLを取得
---------------------------------------------------------- */
//ヘッダーロゴ画像
function get_the_logo_img_url(){
  return esc_url( get_theme_mod( 'logo_img' ) );
}


//02200　デバイス判定ロジック
/*is_mobile
---------------------------------------------------------- */
function is_mobile() {
  $useragents = array(
    'iPhone',          // iPhone
    'iPod',            // iPod touch
    'Android',         // 1.5+ Android
    'dream',           // Pre 1.5 Android
    'CUPCAKE',         // 1.5+ Android
    'blackberry9500',  // Storm
    'blackberry9530',  // Storm
    'blackberry9520',  // Storm v2
    'blackberry9550',  // Storm v2
    'blackberry9800',  // Torch
    'webOS',           // Palm Pre Experimental
    'incognito',       // Other iPhone browser
    'webmate'          // Other iPhone browser
  );
  $pattern = '/'.implode('|', $useragents).'/i';
  return preg_match($pattern, $_SERVER['HTTP_USER_AGENT']);
}


//02300 セキュリティ
/*
 WordPressで作られたということと、そのバージョンを伝えるためのタグ
　<meta name=”generator” content=”WordPress 4.2.5″>
 を消す
*/
 remove_action('wp_head', 'wp_generator');


/*
 長くなってしまったパーマリンクを短くするための短縮URL
　<link rel=”shortlink” href=”http://example.com/?p=1234″ />
 を消す
*/
remove_action('wp_head', 'wp_shortlink_wp_head');


/*
 Windows Live riterというブログ編集ツールを使って編集するためのリソースファイルwlwmanifest.xml
　<link rel=”EditURI” type=”application/wlwmanifest+xml”
title=”RSD” href=”http://exmample.com/wp-includes/wlwmanifest.xml” />
 を消す
*/
remove_action('wp_head', 'wlwmanifest_link');


/*
 外部アプリケーションからリモート投稿や編集をするためのリソースファイル
　<link rel=”EditURI” type=”application/rsd+xml”
title=”RSD” href=”http://exmample.com/xmlrpc.php?rsd” />
 を消す
*/
remove_action('wp_head', 'rsd_link');


/*
 RSSフィード
　<link rel=”alternate” type=”application/rss+xml”
title=”フィード” href=”http://exmample.com/feed/” />
<link rel=”alternate” type=”application/rss+xml”
title=”コメントフィード” href=”http://exmample.com/comments/feed/” />
 を消す
*/
remove_action('wp_head', 'feed_links_extra', 3);


/*
 絵文字に対応するためのJavaScriptとCSSを読み込むタグ。
 を消す
*/
remove_action( 'wp_head', 'print_emoji_detection_script', 7 ); //絵文字対応
remove_action( 'admin_print_scripts', 'print_emoji_detection_script' ); //絵文字対応
remove_action( 'wp_print_styles', 'print_emoji_styles' ); //絵文字対応
remove_action( 'admin_print_styles', 'print_emoji_styles' ); //絵文字対応


/*
 絵文字に対応するためのJavaScriptとCSSを読み込むタグ。
 を消す
*/
remove_action( 'wp_head', 'parent_post_rel_link', 10, 0 ); //分割ページへのリンク
remove_action( 'wp_head', 'start_post_rel_link', 10, 0 ); //分割ページへのリンク
remove_action( 'wp_head', 'adjacent_posts_rel_link_wp_head', 10, 0 ); //分割ページへのリンク


/*
 indexへのリンクさせない。
*/
remove_action( 'wp_head', 'index_rel_link' );


/*
xmlrpc.php攻撃対策
*/
//  1）xmlrpc.phpの無効化(verにより効かない可能性あり)
add_filter('xmlrpc_enabled','__return_false');

// 2）「X-Pingback」のヘッダー情報も消去
function remove_x_pingback($headers) {
unset($headers['X-Pingback']);
return $headers;
}
add_filter('wp_headers','remove_x_pingback');


//02400 ヘッダーフッターメニュー処理
register_nav_menus(array(
    'globalmenu' => esc_html__('グローバルメニュー', 'globalmenus'),
));
register_nav_menus(array(
    'footermenu' => esc_html__('フッターメニュー', 'footer_menus'),
));



//02500 tinyMCE advance フォントサイズ
add_filter( 'tiny_mce_before_init', 'my_mce_before_init',5 );
function my_mce_before_init( $settings ) {
    $settings['fontsize_formats'] = "0.8rem 1rem 1.2rem 1.4rem 1.6rem 1.8rem 2rem 2.2rem 2.4rem";
    return $settings;
}

//02600 コピーライト ショートコード 
function copyrightFunc()
{
    return 'Copyright&copy;<a href="'.home_url().'" class="copyright">Company</a> Co., Ltd. All Rights Reserved.';
}
add_shortcode('copyright', 'copyrightFunc');


//02700 SNS　ショートコード
function snsFunc()

{
  if ( !is_home() && !is_front_page() ){
    $snsContent=  '-' .get_the_title();
  }
return'
            <div id="sns">
              <div class="snsWrapper">
                <a id="twitterBtn" class="twitter btn" href="http://twitter.com/share?url=' . get_the_permalink() . '&text=' . get_bloginfo('name') . ' ' . $snsContent .'" target="_blank">
                  <span class="icon-twitter"></span>
                </a>
                <a id="fbBtn" class="fb btn" href="http://www.facebook.com/share.php?u=' . get_the_permalink() . '" onclick="window.open(this.href, \'FBwindow\', \'width=650, height=450, menubar=no, toolbar=no, scrollbars=yes\'); return false;" target="_blank">
                  <span class="icon-facebook"></span>
                </a>
                <a id="lineBtn" class="line btn" href="http://line.me/R/msg/text/?'. get_the_permalink() . ' ' . get_bloginfo('name') . $snsContent . '" target="_blank">
                  <span class="icon-line"></span>
                </a>
              </div>
            </div>


        ';
      }
add_shortcode('sns', 'snsFunc');



//02800 カスタム投稿一覧処理
// [custompost_get]
function custompost_get_Func($attr) {
  //URLから今何ページ目を表示したいのか取得します
$now_page = get_query_var('page');

//スキップする記事数を決めます。
//1ページ目なら0、2ページ目から18件の記事をスキップして、
//1ページ目なら1件目、2ページ目から19件目から表示できるようにします。
$offset = ( $now_page - 1 ) * 18;

if($attr[4] == "0"){
  $customPostArg = array(
    'paged'        => $paged,
    'offset' => $offset,
    'posts_per_page' => $attr[1],
    'post_type'      => $attr[0],  // カスタム投稿タイプ名
    'order'      => 'DESC',  // カスタム投稿タイプ名
    'tax_query'      => array(
      // 'relation' => 'AND',
      array(
        'taxonomy' => $attr[2],  // カスタムタクソノミー名
        'field'    => 'slug',  // ターム名を term_id,slug,name のどれで指定するか
        'terms'    => $attr[3] // タクソノミーに属するターム名
      )
    )
  );
}else{
  $customPostArg = array(
    'paged'        => $paged,
    'offset' => $offset,
    'posts_per_page' => $attr[1],
    'post_type'      => $attr[0],  // カスタム投稿タイプ名
    'order'      => 'DESC',  // カスタム投稿タイプ名
    'tax_query'      => array(
      'relation' => 'AND',
      array(
        'taxonomy' => $attr[2],  // カスタムタクソノミー名
        'field'    => 'slug',  // ターム名を term_id,slug,name のどれで指定するか
        'terms'    => $attr[3] // タクソノミーに属するターム名
      ),
      array(
        'taxonomy' => $attr[2],  // カスタムタクソノミー名
        'field'    => 'slug',  // ターム名を term_id,slug,name のどれで指定するか
        'terms'    => $attr[4] // タクソノミーに属するターム名
      )
    )
  );
}


  global $post;
  $myposts = get_posts($customPostArg);
  foreach($myposts as $post) :
  setup_postdata($post);
  // アイキャッチ画像のIDを取得
  $thumbnail_id = get_post_thumbnail_id();
  $thumb_post = get_post($thumbnail_id);
  // mediumサイズの画像内容を取得（引数にmediumをセット）
  if (has_post_thumbnail() )  {
    $eye_img = wp_get_attachment_image_src( $thumbnail_id , $size );
    $thumb_url=$eye_img[0];
  }
  else {
    $thumb_url ="/lib/wp-content/uploads/2017/01/img09-200x200.jpg";
  }
  //「説明」を取得
  $thumb_content = $thumb_post->post_content;
  //キャプションを取得
  $thumb_caption = $thumb_post->post_excerpt;
  //altを取得
  $post_meta = get_post_meta( $thumbnail_id );
  $thumb_alt = $post_meta['_wp_attachment_image_alt'][0];

  if(post_custom('tax_included_price') == NULL){
    $price = '';
  }else{
    $price = '<p class="post_content"><span class="red">￥'. post_custom('tax_included_price') . '</span>&nbsp;税込</p>';
  }

  $terms = get_the_terms($myposts->ID ,'productregistration_cat');
  $tags = "";
  foreach ($terms as $term) :
    $tags .= '<div class="categorys">'.$term->name.'</div>';
  endforeach;

  $custompost_get.= '<li>';
    $custompost_get.= '<div class="list_inner">';
      $custompost_get.= $tags;
      $custompost_get.= '<a href="'.get_permalink().'">';
      $custompost_get.= '<img src="'. $thumb_url.'" alt="'.$thumb_alt.'" class="imgRes" />';
      $custompost_get.= '<p class="post_content">'.post_custom('product_name'). '</p>';
      $custompost_get.= '<p class="post_content">'. post_custom('ancillary_information') . '</p>'.$price.'</a>'; $discription_flg++;
    $custompost_get.= '</div>';
  $custompost_get.= '</li>';
  endforeach;
  wp_reset_postdata();
  return $custompost_get;
}
add_shortcode("custompost_get", "custompost_get_Func");


// ページネーション
// ============================
// ページネーション処理
// ============================
function get_posts_list($post_type, $orderby, $ter, $maker_flag) {

    global $wpdb;

    //$sql  = 'SELECT * FROM wp_posts WHERE post_type = "'. $post_type. '" AND post_status = "publish" ORDER BY '. $orderby .' DESC';
    if (($ter != "0")&&($maker_flag == "0")&&($post_type == "post")) {
      $sql  = 'SELECT *
               FROM wp_posts
               WHERE post_type = "'. $post_type. '" AND post_status =  "publish"
                     AND id IN(
                         SELECT object_id
                         FROM wp_term_relationships
                         WHERE term_taxonomy_id = (
                             SELECT term_taxonomy_id
                             FROM wp_term_taxonomy AS tt
                             INNER  JOIN wp_terms AS tm ON tt.term_id = tm.term_id
                             WHERE tm.slug =  "'.$ter.'"  ))
                    ORDER  BY post_date DESC ';
    }else{
              if($maker_flag == "0"){
                $sql  = 'SELECT *
                         FROM wp_posts
                         WHERE post_type = "'. $post_type. '" AND post_status =  "publish"
                         AND id IN(
                             SELECT object_id
                             FROM wp_term_relationships
                             WHERE term_taxonomy_id = (
                                 SELECT term_taxonomy_id
                                 FROM wp_term_taxonomy AS tt
                                 INNER  JOIN wp_terms AS tm ON tt.term_id = tm.term_id
                                 WHERE tm.slug =  "'.$ter.'"  ))
                         ORDER  BY post_date DESC ';
    }else{
// $sql  = 'SELECT *
// FROM wp_posts
// WHERE post_type = "'. $post_type. '" AND post_status =  "publish"
// AND id IN(
// SELECT object_id
// FROM wp_term_relationships
// WHERE term_taxonomy_id = (
// SELECT term_taxonomy_id
// FROM wp_term_taxonomy AS tt
// INNER  JOIN wp_terms AS tm ON tt.term_id = tm.term_id
// WHERE tm.slug =  "'.$ter.'" )
// )
// ORDER  BY post_date DESC ';
// $sql  = 'SELECT *
// FROM wp_posts
// WHERE post_type = "'. $post_type. '" AND post_status =  "publish"
// AND id IN(
// SELECT object_id
// FROM wp_term_relationships
// WHERE term_taxonomy_id = (
// SELECT term_taxonomy_id
// FROM wp_term_taxonomy AS tt
// INNER  JOIN wp_terms AS tm ON tt.term_id = tm.term_id
// WHERE tm.slug =  "'.$maker_flag.'" )
// )
// ORDER  BY post_date DESC ';


$sql  = 'SELECT *
FROM wp_posts
WHERE id IN(SELECT id
FROM wp_posts
WHERE post_type = "'. $post_type. '" AND post_status =  "publish"
AND id IN(
SELECT object_id
FROM wp_term_relationships
WHERE term_taxonomy_id = (
SELECT term_taxonomy_id
FROM wp_term_taxonomy AS tt
INNER  JOIN wp_terms AS tm ON tt.term_id = tm.term_id
WHERE tm.slug =  "'.$maker_flag.'" )
)) AND id IN(SELECT id
FROM wp_posts
WHERE post_type = "'. $post_type. '" AND post_status =  "publish"
AND id IN(
SELECT object_id
FROM wp_term_relationships
WHERE term_taxonomy_id = (
SELECT term_taxonomy_id
FROM wp_term_taxonomy AS tt
INNER  JOIN wp_terms AS tm ON tt.term_id = tm.term_id
WHERE tm.slug =  "'.$ter.'" )
))
ORDER  BY post_date DESC ';

    }
    }

    $sql .= '';
    $sql .= '';

    $result = $wpdb->get_results($sql);

    $flg = 0;
    foreach ($result as $data) {
        $news_data_array[$flg]['post_title'] = $data->post_title;
        $news_data_array[$flg]['ID'] = $data->ID;

        // 日付処理
        $nen = substr($data->post_date, 0, 4);
        $tsuki = substr($data->post_date, 5, 2);
        $tsuki = intval($tsuki);
        $hinichi = substr($data->post_date, 8, 2);
        $hinichi = intval($hinichi);
        //$news_data_array[$flg]['post_date'] = $nen. '年'. $tsuki. '月'. $hinichi. '日';
        // スラッシュ化
        $news_data_array[$flg]['post_date'] = $nen. '/'. $tsuki. '/'. $hinichi;

        // 更新日時
        $news_data_array[$flg]['post_modified'] = get_hachiketa_hiduke($data->post_modified);

        $news_data_array[$flg]['post_content'] = $data->post_content;

        $flg++;
    }

    return $news_data_array;

}

// =====================================
// ページネーションhtmlの取得
// =====================================
function get_posts_pagenation($sou_page, $gen_page, $sento, $saikoubi, $page_option) {

    $page_html  = '<div class="pagination textCenterCm">';
    $page_html .= '    <div class="wp-pagenavi">';


    // 7ページ以下なら
    if ($sou_page <= 7) {
        for ($i = 1; $i <= $sou_page; $i++) {
            if ($i == $gen_page) {
                $page_html .= '        <span class="current">'. $i. '</span>';
            } else {
                $page_html .= '        <a class="page larger" title="Page '. $i. '" href="'. home_url(). '/'. $page_option. 'page='. $i. '">'. $i. '</a>';
            }
        }


    // 7ページ以上なら
    } else {

        // gen_pageが１，２，３の場合
        if ($gen_page <= 3) {
            for ($i = 1; $i <= 5; $i++) {
                if ($i == $gen_page) {
                    $page_html .= '        <span class="current">'. $i. '</span>';
                } else {
                    $page_html .= '        <a class="page larger" title="Page '. $i. '" href="'. home_url(). '/'. $page_option. 'page='. $i. '">'. $i. '</a>';
                }
            }

            // 6つ目
            $page_html .= '        <span class="tenten">…</span>';

            // 7つ目
            $page_html .= '        <a class="nextpostslink" rel="next" href="'. home_url(). '/'. $page_option. 'page='. $sou_page. '">'. $saikoubi. '</a>';


        // 現在のページが最後のページから１番目、２番目、３番目なら
        } else if (($gen_page == $sou_page) || ($gen_page == $sou_page - 1) || ($gen_page == $sou_page - 2)) {

            // 1つ目
            $page_html .= '        <a class="nextpostslink" rel="next" href="'. home_url(). '/'. $page_option. 'page=1">'. $sento. '</a>';

            // 2つ目
            $page_html .= '        <span class="tenten">…</span>';

            $flg = $sou_page - 4;
            for ($i = $flg; $i <= $sou_page; $i++) {
                if ($i == $gen_page) {
                    $page_html .= '        <span class="current">'. $i. '</span>';
                } else {
                    $page_html .= '        <a class="page larger" title="Page '. $i. '" href="'. home_url(). '/'. $page_option. 'page='. $i. '">'. $i. '</a>';
                }
            }


        // 現在のページが１でもなく、最後でもない、中ページの場合
        } else {

            // 1つ目
            $page_html .= '        <a class="nextpostslink" rel="next" href="'. home_url(). '/'. $page_option. 'page=1">'. $sento. '</a>';

            // 2つ目
            $page_html .= '        <span class="tenten">…</span>';

            // ３ループさせる
            for ($i = 1; $i <= 3; $i++) {

                // gen_pageは真ん中になるので、一旦gen_pageから-2をする
                $text_flg = $gen_page - 2;
                $a_text = $text_flg + $i;
                if ($a_text == $gen_page) {
                    $page_html .= '        <span class="current">'. $a_text. '</span>';
                } else {
                    $page_html .= '        <a class="page larger" title="Page '. $a_text. '" href="'. home_url(). '/'. $page_option. 'page='. $a_text. '">'. $a_text. '</a>';
                }

            }

            // 6つ目
            $page_html .= '        <span class="tenten">…</span>';

            // 7つ目
            $page_html .= '        <a class="nextpostslink" rel="next" href="'. home_url(). '/'. $page_option. 'page='. $sou_page. '">'. $saikoubi. '</a>';

        }

    }


    $page_html .= '    </div>';
    $page_html .= '</div>';

    return $page_html;

}

function get_hachiketa_hiduke($data) {

        $nen = substr($data, 0, 4);
        $tsuki = substr($data, 5, 2);
        $tsuki = intval($tsuki);
        $hinichi = substr($data, 8, 2);
        $hinichi = intval($hinichi);
        //$retval = $nen. '年'. $tsuki. '月'. $hinichi. '日';
        // スラッシュ化
        $retval = $nen. '/'. $tsuki. '/'. $hinichi;

        return $retval;

}
/////////////////////////////////////////////////////////







register_nav_menus(array(
    'globalmenu_gasshukumekyo_uketsuke' => esc_html__('合宿免許受付センター', 'globalmenus_gasshukumekyo_uketsuke'),
));






//CSVの読み込みコード
// http://www.warna.info/archives/1481/　参照
function table_shortcode( $atts ) {
    $default = array(
        'th'            => 'row',
        'caption'       => '',
        'file'          => get_stylesheet_directory_uri()  . '/csv/' . basename(get_permalink()) . '.csv',
        'id'            => false,
        'charset'       => 'sjis-win',
        'table_id'      => '',
        'table_class'   => '',Í
        'tfoot'         => 'false',
    );
    $args = shortcode_atts( $default, $atts );
 
    if ( is_numeric( $args['id'] ) ) {
        $post = get_post( $args['id'] );
        if ( $post->post_mime_type == 'text/csv' ) {
            $args['file'] = $post->guid;
        }
    }
 
    $match_num = 0;
    if ( preg_match( '|^https?://|', $args['file'] ) && strpos( $args['file'], '../' ) === false ) {
        $file = str_replace( WP_CONTENT_URL, WP_CONTENT_DIR, $args['file'], $match_num );
    } elseif ( preg_match( '|^/|', $args['file'] ) && strpos( $args['file'], '../' ) === false ) {
        $file = $_SERVER['DOCUMENT_ROOT'] . $args['file'];
        $match_num = 1;
    }
 
    if ( $match_num && file_exists( $file ) && is_readable( $file ) ) {
        $charset = in_array( strtolower( $args['charset'] ), array( 'utf-8', 'euc-jp', 'eucjp-win', 'sjis', 'sjis-win', 'iso-2022-jp' ) ) ? $args['charset'] : $default['charset'];
        $th = in_array( strtolower( $args['th'] ), array( 'col', 'row', 'both' ) ) ? strtolower( $args['th'] ) : $default['th'];
        $fh = fopen( $file, 'r' );
        if ( $fh ) {
            $row_num = $th == 'row' ? 1 : 0;
            $table_id = $args['table_id'] ? ' id="' . esc_attr( $args['table_id'] ) . '"' : '';
            $table_class = $args['table_class'] ? ' class="' . esc_attr( $args['table_class'] ) . '"' : '';
            $output = '<div' . $table_id . $table_class . '>' . "\n";
            if ( $args['caption'] ) {
                $output .= '<caption>' . esc_html( $args['caption'] ) . "</caption>\n";
            }
            $month = "" ;
            while ( $row = Ps_fgetcsv_reg( $fh, $args['charset'] ) ) {
                if ( $row_num == 0 ) {
                    $row_class = 'head_row';
                } else {
                    $row_class = $row_num % 2 ? 'odd' : 'even';
                }
                // if ( $row_num == 0 ) {
                //     $output .= '<thead>' . "\n";
                // } elseif ( $row_num == 1 ) {
                //     $output .= '<tbody>' . "\n";
                // }

                if($row_num != 1 && $row_num != 2 && $row_num != 3 ){



                  $line = '<div class="' . $row_class .' col' . $row_num . '">' . "\n";
   
                  for ( $i = 0; $i < count( $row ); $i++ ) {

                      // $elm = ( $th != 'col' && $i == 0 ) || $row_num == 0 ? 'th' : 'td';
                      if ($i == 0 ){
                      	if ($row[$i] != $month){
                      		if( $month == "" ){
                      		$line .= '</div>1111111111<br>';
                      		}

                      		$line .='<!--' . $row[$i] . '222' . $month . '-->';
                      		$line .='<div class="aaa">';
	                      	$line .= '<p class="mt ' . $i . '">' . $row[$i] . "</p>\n";
                      		$closeFlag = "1";
                      		$month = $row[$i];
                      	}
                      	else{
						$line .='<!--' . $row[$i] . '-->';
	
                      	}
                      }

	                    if ($i == 1 ){
	                      $line .= '<p class="at ' . $i . '">' . $row[$i] . "</p>\n";
	                      $lineMt .= '<p class="mt ' . $i . '">' . $row[$i] . "</p>\n";
	                      $lineAt .= '<p class="at ' . $i . '">' . $row[$i] . "</p>\n";
	                    }

	                    elseif($i != 0 ){//範囲を入れる　2～4はAT　5～7はMT
	                      $line .= '<p class="mt ' . $i . '">' . $row[$i] . "</p>\n";
	                    }



                    }

                  $line .= '</div>' . "\n";
                  $output .= $line;

                  }



                // if ( $row_num == 0 ) {
                //     $output .= '</thead>' . "\n";
                //     if ( in_array( strtolower( $args['tfoot'] ), array( '1', 'true' ) ) ) {
                //         $output .= '<tfoot>' . "\n";
                //         $output .= '<tr class="' . $row_class .' ' . $row_num . '">' . "\n";
                //         $output .= $line;
                //         $output .= '</tr>' . "\n";
                //         $output .= '</tfoot>' . "\n";
                //     }
                // }
                $row_num++;
            }
            // $output .= "</tbody>\n";
            $output .= '</div>';

        }
    }
    return $output;
}
add_shortcode( 'csv2table', 'table_shortcode' );
 
 
function Ps_fgetcsv_reg ( &$handle, $charset = 'sjis-win', $length = null, $d = ',', $e = '"' ) {
    $d = preg_quote( $d );
    $e = preg_quote( $e );
    $_line = ""; 
    $eof = false;
    while ( ( $eof != true ) and ( ! feof( $handle ) ) ) {
        $_line .= ( empty( $length ) ? fgets( $handle ) : fgets( $handle, $length ) );
        $itemcnt = preg_match_all( '/'.$e.'/', $_line, $dummy );
        if ( $itemcnt % 2 == 0 ) $eof = true;
    }
    if ( strtolower( $charset ) != 'utf-8' ) {
        $_line = mb_convert_encoding( $_line, 'UTF-8', $charset );
    }
    $_csv_line = preg_replace( '/(?:\r\n|[\r\n])?$/', $d, trim( $_line ) );
    $_csv_pattern = '/('.$e.'[^'.$e.']*(?:'.$e.$e.'[^'.$e.']*)*'.$e.'|[^'.$d.']*)'.$d.'/';
    preg_match_all( $_csv_pattern, $_csv_line, $_csv_matches );
    $_csv_data = $_csv_matches[1];
    for( $_csv_i = 0; $_csv_i < count( $_csv_data ); $_csv_i++ ) {
        $_csv_data[$_csv_i] = preg_replace( '/^'.$e.'(.*)'.$e.'$/s', '$1', $_csv_data[$_csv_i] );
        $_csv_data[$_csv_i] = str_replace( $e.$e, $e, $_csv_data[$_csv_i] );
    }
    return empty( $_line ) ? false : $_csv_data;
}


